{"version":3,"sources":["home/index.js","demo/dfs.js","demo-mobx/index.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","toDfs","_this","props","history","push","toMobx","react_default","a","createElement","Content","es_button","type","onClick","this","Component","styled","div","_templateObject","DfsBfs","componentDidMount","node","document","getElementsByClassName","console","log","dfs","bfs","nodeList","arguments","length","undefined","children","i","nodes","stack","item","shift","className","App","react_router_dom","react_router","path","component","Home","Dfs","Mobx","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAIqBA,6MACnBC,MAAQ,WACNC,EAAKC,MAAMC,QAAQC,KAAK,WAE1BC,OAAS,WACPJ,EAAKC,MAAMC,QAAQC,KAAK,kFAGxB,OACEE,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAASC,KAAKb,OAArC,QAIFM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,KAAK,UAAUC,QAASC,KAAKR,QAArC,iBAhB4BS,aAyBhCL,EAAUM,IAAOC,IAAVC,KC3BQC,6MACnBC,kBAAoB,WAClB,IAAMC,EAAOC,SAASC,uBAAuB,UAAU,GACvDC,QAAQC,IAAIvB,EAAKwB,IAAIL,IACrBG,QAAQC,IAAIvB,EAAKyB,IAAIN,OAGvBK,IAAM,SAACL,GAAwB,IAAlBO,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACtB,GAAa,OAATR,EAAe,CACjBO,EAASvB,KAAKgB,GAEd,IADA,IAAIW,EAAWX,EAAKW,SACXC,EAAI,EAAGA,EAAID,EAASF,OAAQG,IACnC/B,EAAKwB,IAAIM,EAASC,GAAIL,GAG1B,OAAOA,KAGTD,IAAM,SAAAN,GACJ,IAAIa,EAAQ,GACRC,EAAQ,GACZ,GAAId,EAEF,IADAc,EAAM9B,KAAKgB,GACJc,EAAML,QAAQ,CACnB,IAAIM,EAAOD,EAAME,QACbL,EAAWI,EAAKJ,SACpBE,EAAM7B,KAAK+B,GAMX,IAAK,IAAIH,EAAI,EAAGA,EAAID,EAASF,OAAQG,IACnCE,EAAM9B,KAAK2B,EAASC,IAI1B,OAAOC,2EAIP,OAEE3B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,UACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,WACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAf,MAEF/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAf,OAGJ/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,WACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aAAf,KACA/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAf,eAvDwBvB,aCAfI,6MACnBC,kBAAoB,WAClB,IAAMC,EAAOC,SAASC,uBAAuB,UAAU,GACvDC,QAAQC,IAAIvB,EAAKwB,IAAIL,IACrBG,QAAQC,IAAIvB,EAAKyB,IAAIN,OAGvBK,IAAM,SAACL,GAAwB,IAAlBO,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACtB,GAAa,OAATR,EAAe,CACjBO,EAASvB,KAAKgB,GAEd,IADA,IAAIW,EAAWX,EAAKW,SACXC,EAAI,EAAGA,EAAID,EAASF,OAAQG,IACnC/B,EAAKwB,IAAIM,EAASC,GAAIL,GAG1B,OAAOA,KAGTD,IAAM,SAAAN,GACJ,IAAIa,EAAQ,GACRC,EAAQ,GACZ,GAAId,EAEF,IADAc,EAAM9B,KAAKgB,GACJc,EAAML,QAAQ,CACnB,IAAIM,EAAOD,EAAME,QACbL,EAAWI,EAAKJ,SACpBE,EAAM7B,KAAK+B,GAMX,IAAK,IAAIH,EAAI,EAAGA,EAAID,EAASF,OAAQG,IACnCE,EAAM9B,KAAK2B,EAASC,IAI1B,OAAOC,2EAIP,OAEE3B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,UACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,WACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAf,MAEF/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAf,OAGJ/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,WACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aAAf,KACA/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eAAf,eAvDwBvB,aCIfwB,mLAEjB,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWC,IAC3BrC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,OAAOC,UAAWE,IAC9BtC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWG,cARV/B,aCMbgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.857b6cc1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Button } from \"antd\";\n\nexport default class HomePage extends Component {\n  toDfs = () => {\n    this.props.history.push(\"/dfs\");\n  };\n  toMobx = () => {\n    this.props.history.push(\"/mobx\");\n  };\n  render() {\n    return (\n      <Content>\n        <div>\n          <Button type=\"primary\" onClick={this.toDfs}>\n            dfs\n          </Button>\n        </div>\n        <div>\n          <Button type=\"primary\" onClick={this.toMobx}>\n            mobx\n          </Button>\n        </div>\n      </Content>\n    );\n  }\n}\n\nconst Content = styled.div`\n  padding: 20px;\n`;\n","import React, { Component } from \"react\";\n\nexport default class DfsBfs extends Component {\n  componentDidMount = () => {\n    const node = document.getElementsByClassName(\"parent\")[0];\n    console.log(this.dfs(node));\n    console.log(this.bfs(node));\n  };\n\n  dfs = (node, nodeList = []) => {\n    if (node !== null) {\n      nodeList.push(node);\n      let children = node.children;\n      for (let i = 0; i < children.length; i++) {\n        this.dfs(children[i], nodeList);\n      }\n    }\n    return nodeList;\n  };\n\n  bfs = node => {\n    let nodes = [];\n    let stack = [];\n    if (node) {\n      stack.push(node);\n      while (stack.length) {\n        let item = stack.shift();\n        let children = item.children;\n        nodes.push(item);\n        // 队列，先进先出\n        // nodes = [] stack = [parent]\n        // nodes = [parent] stack = [child1,child2,child3]\n        // nodes = [parent, child1] stack = [child2,child3,child1-1,child1-2]\n        // nodes = [parent,child1,child2]\n        for (let i = 0; i < children.length; i++) {\n          stack.push(children[i]);\n        }\n      }\n    }\n    return nodes;\n  };\n\n  render() {\n    return (\n      // react\n      <div className=\"parent\">\n        <div className=\"child-1\">\n          <div className=\"child-1-1\">\n            <div className=\"child-1-1-1\">1</div>\n          </div>\n          <div className=\"child-1-2\">\n            <div className=\"child-1-2-1\">2</div>\n          </div>\n        </div>\n        <div className=\"child-2\">\n          <div className=\"child-2-1\">3</div>\n          <div className=\"child-2-2\">\n            <div className=\"child-2-2-1\">4</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class DfsBfs extends Component {\n  componentDidMount = () => {\n    const node = document.getElementsByClassName(\"parent\")[0];\n    console.log(this.dfs(node));\n    console.log(this.bfs(node));\n  };\n\n  dfs = (node, nodeList = []) => {\n    if (node !== null) {\n      nodeList.push(node);\n      let children = node.children;\n      for (let i = 0; i < children.length; i++) {\n        this.dfs(children[i], nodeList);\n      }\n    }\n    return nodeList;\n  };\n\n  bfs = node => {\n    let nodes = [];\n    let stack = [];\n    if (node) {\n      stack.push(node);\n      while (stack.length) {\n        let item = stack.shift();\n        let children = item.children;\n        nodes.push(item);\n        // 队列，先进先出\n        // nodes = [] stack = [parent]\n        // nodes = [parent] stack = [child1,child2,child3]\n        // nodes = [parent, child1] stack = [child2,child3,child1-1,child1-2]\n        // nodes = [parent,child1,child2]\n        for (let i = 0; i < children.length; i++) {\n          stack.push(children[i]);\n        }\n      }\n    }\n    return nodes;\n  };\n\n  render() {\n    return (\n      // react\n      <div className=\"parent\">\n        <div className=\"child-1\">\n          <div className=\"child-1-1\">\n            <div className=\"child-1-1-1\">1</div>\n          </div>\n          <div className=\"child-1-2\">\n            <div className=\"child-1-2-1\">2</div>\n          </div>\n        </div>\n        <div className=\"child-2\">\n          <div className=\"child-2-1\">3</div>\n          <div className=\"child-2-2\">\n            <div className=\"child-2-2-1\">4</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./home\";\nimport Dfs from \"./demo/dfs\";\nimport Mobx from \"./demo-mobx\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Switch>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/dfs\" component={Dfs} />\n            <Route path=\"/mobx\" component={Mobx} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}